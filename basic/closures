function x(){
  var a=7;
  function y(){
    console.log(a);
  }
  y();
}
x();
closure - a function along with its lexical environment bundled together forms closure.
  Closure gives access to an outer function's scope from an inner function.
  Scope Closure


Uses of Closures -
  Module Design Pattern
  Currying
  Functions like once
  memoize
  maintaining state in async world
  setTimeouts
  Iterators
  data hiding encapsulation

A closure gives access to all the variables of it's parent function even after the that parent function has returned or executed. 
The function keeps a refernce to it's outer scope which preserves the scope chain throughout the time

function x(){
  var i = 1;
  setTimeout(function(){
        console.log(i)             
  },1000
   console.log("Namaste JS")                  
}
      Namste JS
-- print 1 after 1 second

1. An inner function can be directly called using two parenthesis ()().
2. Even parameters can be passed this way (Remember that the function needs to be returned to do this)
3. Closures can also be used for data hiding and encapsulation. So other code cannot access this value.
4. Unused variables are automatically deleted in High Level Programming language by garbage collector. Closures allocate a lot of memory which cannot be deleted so this acts as a disadvantage.
5. Some browsers now have smart garbage collectors that automatically deletes variables that are not used outside closures.


Uses -
Using private variables and methods: 
In JavaScript, we can use private variables and methods using closures. The example below shows the use of private variables with closure.

 In this example, the rentPrice() function returns an object with three methods: getRent(), incRent(), and decRent(). These three methods has access to the private variable rent. However, the code outside its scope cannot directly access this variable. Hence, we can mimic object oriented programming in JavaScript.

// Define the closure 
var rentPrice = function(initialRent) { 
   var rent = initialRent; 
  
    // Define private variables for 
    // the closure 
    return { 
      getRent: function() { 
        return console.log(rent); 
      }, 
      incRent: function(amount) { 
        rent += amount; 
        console.log(rent); 
      }, 
      decRent: function(amount) { 
         rent -= amount; 
         console.log(rent); 
      } 
    } 
} 
  
var Rent = rentPrice(8000); 
  
// Access the private methods 
Rent.incRent(2000); 
Rent.decRent(1500); 
Rent.decRent(1000);  
Rent.incRent(2000);  
Rent.getRent();

Maintaining state between each function call: 
Suppose there is a function and one would like it to multiply multiple values together. 
This could be done with the help of a global variable as they are accessible throughout the program.
However, a drawback is that they are prone to change from anywhere in the code. This can be done alternatively using closures.
Closures help in maintaining the state between function calls without using a global variable.
  
  var multFn = function multiply() { 
   var mult = 9; 
   return function(val) { 
     mult = mult * val; 
     return mult; 
   } 
  }; 
  
  var mult = multFn(); 
    
  // Call the method 
  // multiple times 
  console.log(mult(2)); 
  console.log(mult(3)); 
  console.log(mult(5)); 

18
54
270

