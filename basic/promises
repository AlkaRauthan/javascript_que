1 - Callback hell
When a function is passed as an argument to another function, it becomes a callback function. This process continues and there are many callbacks inside another's Callback function.
This grows the code horizontally instead of vertically. That mechanism is known as callback hell. 

2 - Inversion of control
The callback function is passed to another callback, this way we lose the control of our code. We don't know what is happening behind the scene and the program becomes very difficult to maintain. 
That process is called inversion of control.

Promises - 
  Promise object is a placeholder which will be filled later with value. until we receive value from asynchronous operation.
  Promise is an object, which represents the eventual completion or failure of asynchronous operation.
   - Pending
   - Fulfilled
   - Rejected

 promise objects are immutable. const users = fetch(url)
 users is immutable here

 A promise is an object that represents eventual completion/failure of an asynchronous operation.
  A promise has 3 states: pending | fulfilled | rejected.
  As soon as promise is fulfilled/rejected => It updates the empty object which is assigned undefined in pending state.
  A promise resolves only once and it is immutable. 
   Using .then() we can control when we call the cb(callback) function.
  To avoid callback hell (Pyramid of doom) => We use promise chaining. This way our code expands vertically instead of horizontally. Chaining is done using '.then()'
  A very common mistake that developers do is not returning a value during chaining of promises. Always remember to return a value. This returned value will be used by the next .then()

  const promise = new Promise(function(resolve,reject){
    if!(validateCart(cart)){
      reject(new Error("not valid"))
    }
    resolve("with some data');
    
  });
  return promise;

  -in case of resolve .then of promise is triggered
  -in case of reject .catch is called

  const promise = createOrder([]); -- create order is some function return promise

  promise
  .then((res) => {
    console.log(res);
  }
  .catch((err) => {
    console.log(err);
  })
